version: "3.9"

services:
  todo-app:
    build: ./frontend/todo-app
    image: todo-app
    restart: on-failure
    ports:
      - 8000:80
    networks:
      - frontend

  api-gateway:
    build: ./backend/api-gateway
    image: api-gateway
    restart: on-failure
    env_file:
      - ./env/api-gateway.env
    ports:
      - 8080:80
    networks:
      - backend

  todo-api:
    build: ./backend/todo-api
    image: todo-api
    restart: on-failure
    env_file:
      - ./env/todo-api.env
    ports:
      - 8081:8081
    networks:
      - backend
    depends_on:
      - db
      - nats

  todo-service:
    build: ./backend/todo-service
    image: todo-service
    restart: on-failure
    env_file:
      - ./env/todo-service.env
    networks:
      - backend
    depends_on:
      - db
      - nats

  notification-service:
    build: ./backend/notification-service
    image: notification-service
    restart: on-failure
    env_file:
      - ./env/notification-service.env
    networks:
      - backend
    depends_on:
      - nats
      - api-gateway

  db:
    image: postgres:13.2
    restart: on-failure
    env_file:
      - ./env/postgres.env
    ports:
      - 5432:5432
    volumes:
      - db:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend

  nats:
    image: nats:2.2.2-alpine3.13
    restart: on-failure
    ports:
      - 4222:4222
    networks:
      - backend

  migrate:
    image: migrate/migrate
    restart: on-failure
    volumes:
      - ./backend/db/migrations:/migrations
      - ./backend/db/migrate.sh:/migrate.sh
    env_file:
      - ./env/migrate.env
    entrypoint: /migrate.sh
    networks:
      - backend
    depends_on:
      - db

  minio:
    image: minio/minio
    restart: on-failure
    command: server /data
    env_file:
      - ./env/minio.env
    ports:
      - 9000:9000
    volumes:
      - minio:/data
    networks:
      - monitor

  minio-mc:
    image: minio/mc
    restart: on-failure
    volumes:
      - ./monitor/create_loki_bucket.sh:/create_loki_bucket.sh
    env_file:
      - ./env/minio.env
    entrypoint: /create_loki_bucket.sh
    networks:
      - monitor
    depends_on:
      - minio

  loki:
    image: grafana/loki
    restart: on-failure
    ports:
      - "3100:3100"
    volumes:
      - ./monitor/loki.yml:/etc/loki/config.yml
    command: -config.file=/etc/loki/config.yml
    networks:
      - monitor
    depends_on:
      - minio

  promtail:
    image: grafana/promtail
    restart: on-failure
    volumes:
      - promtail:/tmp/promtail
      - /var/lib/docker/containers:/var/lib/docker/containers
      - ./monitor/promtail.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitor
      - backend
    depends_on:
      - loki

  grafana:
    image: grafana/grafana
    restart: on-failure
    ports:
      - "3000:3000"
    env_file:
      - ./env/grafana.env
    volumes:
      - grafana:/var/lib/grafana
    networks:
      - monitor
      - backend
    depends_on:
      - db

networks:
  frontend:
  backend:
  monitor:

volumes:
  db:
  minio:
  grafana:
  promtail:
